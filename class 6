create database class6;

use class6;

create table employees(
  emp_id int,
  emp_name varchar(50),
  mobile BIGINT,
  dept_name varchar(50),
  salary int 
);

insert into employees values(1,'Shashank',778768768,'Software',1000);
insert into employees values(2,'Rahul',876778877,'IT',2000);
insert into employees values(3,'Amit',098798998,'HR',5000);

insert into employees values(4,'Nikhil',67766767,'IT',3000);
insert into employees values(5,'Suresh',1234567890,'Finance',4000);


select * from employees;

# create views in sql

create view emp_view_finance AS
select emp_id, emp_name, mobile, salary from employees;

select * from emp_view_finance;
# the logic behind the view is that it hides the complexity of the query from the user.
# It allows users to access a simplified version of the data without needing to understand the underlying query.
# under the hood it will be a select query on employees table. SElect * from (select emp_id, emp_name, mobile, salary from employees;)


#create logic for department wise salary sum

create view deptwise_salary AS
select dept_name, sum(salary) as total_salary from employees
group by dept_name;

select * from deptwise_salary;

# Union and Union all

#union combines the results of two or more SELECT statements into a single result set, removing duplicates.
#union all combines the results of two or more SELECT statements into a single result set, including duplicates.

create table student
(
    stu_id int,
    name varchar(50), 
    email varchar(50), 
    city varchar(50)
 );
 
 insert into student values(1,'Shashank','abc@gmail.com', 'lucknow');
 insert into student values(2,'Rahul','abc1@gmail.com', 'mp');
  insert into student values(3,'Amit','ab2@gmail.com', 'noida');
   insert into student values(4,'Nikhil','abc3@gmail.com', 'bangalore');
    insert into student values(5,'Sunny','ab4@gmail.com', 'bangalore');

select * from student;

-- Creating a second table with similar structure to demonstrate UNION and UNION ALL
    
create table student2
(
    stu_id int,
    name varchar(50), 
    email varchar(50), 
    city varchar(50)
 );


insert into student2 values(1,'Shashank','abc@gmail.com', 'lucknow');
 insert into student2 values(6,'Anuj','abc5@gmail.com', 'mp');
  insert into student2 values(8,'Mohit','ab7@gmail.com', 'noida');
   insert into student2 values(10,'Sagar','abc10@gmail.com', 'bangalore');
    insert into student2 values(5,'Sunny','ab4@gmail.com', 'bangalore');
    
select * from student2;

-- Using UNION to combine results from both tables, removing duplicates

select * from student
union
select * from student2; 

-- Using UNION ALL to combine results from both tables, including duplicates

select * from student       
union all
select * from student2;

# here it is working so well because the table or columns are same in both the tables.

# If the columns are not same then we can use alias to make them same.
# For example, if we want to combine two tables with different column names, we can use aliases to make them match.

-- Example of using aliases to match columns for UNION

select stu_id as id, name as student_name, email as student_email, city as student_city from student
union
select stu_id as id, name as student_name, email as student_email, city as student_city from student2;


#recursive query

-- Recursive queries are used to retrieve data from hierarchical structures, such as organizational charts or bill of materials.
-- They allow you to traverse a hierarchy and retrieve data at multiple levels.
-- Recursive queries are typically implemented using Common Table Expressions (CTEs) or with clause in SQL.

-- 2 types of with clause are there:

-- 1. Non-recursive/Iterative with clause: This is used to define a temporary result set that can be referenced within a single query.'
-- 2. Recursive with clause: This is used to define a recursive query that can reference itself to retrieve data from hierarchical structures.

--- Common table expression

create table amazon_employees(
    emp_id int,
    emp_name varchar(20),
    dept_id int,
    salary int

 );

 insert into amazon_employees values(1,'Shashank', 100, 10000);
 insert into amazon_employees values(2,'Rahul', 100, 20000);
 insert into amazon_employees values(3,'Amit', 101, 15000);
 insert into amazon_employees values(4,'Mohit', 101, 17000);
 insert into amazon_employees values(5,'Nikhil', 102, 30000);

 create table department
 (
    dept_id int,
    dept_name varchar(20) 
  );

 insert into department values(100, 'Software');
    insert into department values(101, 'HR');
      insert into department values(102, 'IT');
        insert into department values(103, 'Finance');

--- Write a query to print the name of department along with the total salary paid in each department
--- Normal approach

select d.dept_name, tmp.total_salary
from (select dept_id , sum(salary) as total_salary from amazon_employees group by dept_id) tmp
inner join department d on tmp.dept_id = d.dept_id;

--- how to do it using iterative with clause??

with dept_wise_salary as (select dept_id , sum(salary) as total_salary from amazon_employees group by dept_id)
select d.dept_name, tmp.total_salary
from dept_wise_salary tmp
inner join department d on tmp.dept_id = d.dept_id;

--- Recursive with clause

--- Write a Query to generate numbers from 1 to 10 in SQL

with recursive generate_numbers as   
(
  select 1 as n
  union
  select n+1 from generate_numbers where n < 10
)
select * from generate_numbers;
-- This query generates a sequence of numbers from 1 to 10 using a recursive Common Table Expression (CTE).

create table emp_mgr
(
id int,
name varchar(50),
manager_id int,
designation varchar(50),
primary key (id)
);


insert into emp_mgr values(1,'Shripath',null,'CEO');
insert into emp_mgr values(2,'Satya',5,'SDE');
insert into emp_mgr values(3,'Jia',5,'DA');
insert into emp_mgr values(4,'David',5,'DS');
insert into emp_mgr values(5,'Michael',7,'Manager');
insert into emp_mgr values(6,'Arvind',7,'Architect');
insert into emp_mgr values(7,'Asha',1,'CTO');
insert into emp_mgr values(8,'Maryam',1,'Manager');


select * from emp_mgr;

---for our cto "asha" we want to find out all the employees who are reporting to her directly or indirectly.

with recursive emp_hier AS
(
  select id, name, manager_id, designation from emp_mgr where name = 'Asha'  -- anchor query/Starting point: the employee we want to find subordinates for
  union 
  select em.id, em.name, em.manager_id, em.designation from emp_hier eh inner join emp_mgr em on eh.id = em.manager_id  -- recursive query: find employees managed by the previous level
)
select * from emp_hier;
-- This query retrieves all employees who report directly or indirectly to the employee named 'Asha' using a recursive Common Table Expression (CTE).
-- The recursive CTE starts with the employee 'Asha' and then recursively finds all employees managed by her, including those managed by their subordinates.

# to also the level of hierarchy we can add a level column in the emp_hier CTE

with recursive emp_hier AS
(
  select id, name, manager_id, designation,1 as lvl from emp_mgr where name = 'Asha'  -- anchor query/Starting point: the employee we want to find subordinates for
  union 
  select em.id, em.name, em.manager_id, em.designation, eh.lvl + 1 as lvl from emp_hier eh inner join emp_mgr em on eh.id = em.manager_id  -- recursive query: find employees managed by the previous level
)
select * from emp_hier;
