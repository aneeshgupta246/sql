CREATE DATABASE test;
USE test;

create table amazon
 (
 customerid int,
 orderid int,
 country varchar(50),
 state varchar(50)
 );

 Insert into amazon values(1,100,'usa','texas');
 Insert into amazon values(1,100,'usa','texas');
Insert into amazon values(1,100,'usa','texas');
  Insert into amazon values(2,900,'india','madhya pradesh'); 
  Insert into amazon values(3,300,'usa','north carolina');
   Insert into amazon values(4,200,'india','punjab');
    Insert into amazon values(5,800,'usa','california');
     Insert into amazon values(6,600,'africa','south africa');
      Insert into amazon values(7,500,'usa','dc');

Select * from amazon;

# use of having clause
# write a query top find a country where only one customer is there
select country from amazon group by country having count(*)=1;

# where clause is used to filter the records before grouping and having clause is used to filter the records after grouping

# how to use group concant
# group concat is used to concatenate the values of a column into a single string

# for example, if we have a table with customer id and order id, we can use group concat to get a list of order ids for each customer id

# write a query to print distinct states present in the dataset for each country
select country, group_concat(state) as states_from_country from amazon group by country;

#to remove duplicates from the list of states, we can use distinct keyword in group_concat function
select country, group_concat( distinct state) as states_from_country from amazon group by country;

# write a query to print distinct states present in the dataset for each country and order them in descending order 
select country, group_concat( distinct state order by state desc) as states_from_country from amazon group by country;

#separator keyword is used to specify the separator between the values in the concatenated string. By default, it is comma(,). We can change it to any other character or string.
# for example, if we want to use space as separator, we can use the following query
select country, group_concat( distinct state order by state desc separator '-') as states_from_country from amazon group by country;

create table employees
(
 id int,
 name varchar(50),
 saalry int
);

insert into employees values(1,'john',1000);
insert into employees values(2,'jane',2000);
insert into employees values(3,'jack',3000);
insert into employees values(4,'jill',4000);        
insert into employees values(5,'james',5000);
insert into employees values(6,'jake',6000);

select * from employees;

# write a query to print all those employees whose salary is greater than jack's salary

# wrong solution --> select * from employees where saalry > 6000;
select * from employees where saalry > (select saalry from employees where name='jack');

# write a query to print all those employees whose salary is greater than jack's salary and less than jill's salary
select * from employees where saalry > (select saalry from employees where name='john') and saalry < (select saalry from employees where name='jill');

# lookup function use of in and not in

# write a query to print all orders which were placed in madhya pradesh and punjab

#wrong solution --> select * from amazon where state = 'madhya pradesh' or state = 'punjab';
select * from amazon where state in ('madhya pradesh','punjab');

create table customer_orders
(
 order_id int,
 cust_id int,
 supp_id int,
country varchar(50)
);

insert into customer_orders values(1,101,100,'usa');
insert into customer_orders values(2,102,200,'usa');   
insert into customer_orders values(3,103,300,'india');
insert into customer_orders values(4,104,400,'pakistan');

insert into customer_orders values(5,105,500,'UK');

select * from customer_orders;

create table supplier_data
(
 supp_id int,
 country varchar(50)
);

insert INTO SUPPLIER_DATA VALUES(100,'usa');
insert INTO SUPPLIER_DATA VALUES(200,'usa');
insert INTO SUPPLIER_DATA VALUES(300,'india');
insert INTO SUPPLIER_DATA VALUES(400,'pakistan');

insert INTO SUPPLIER_DATA VALUES(500,'UAE');

SELECT * FROM SUPPLIER_DATA;\

# write a query to print all CUSTOMER ORDER DATA orders where supplier is LIVING IN THE SAME COUNTRY AS CUSTOMER
SELECT * FROM CUSTOMER_ORDERS WHERE COUNTRY IN (SELECT DISTINCT COUNTRY FROM SUPPLIER_DATA);

# write a query to print all CUSTOMER ORDER DATA orders where supplier is NOT LIVING IN THE SAME COUNTRY AS CUSTOMER
SELECT * FROM CUSTOMER_ORDERS WHERE COUNTRY NOT IN (SELECT DISTINCT COUNTRY FROM SUPPLIER_DATA);


#case when in sql
# case when is used to perform conditional operations in sql. It is similar to if-else statement in programming languages.
Create table students
(
 id int,
 name varchar(50),
 marks int
);

insert into students values(1,'john',100);
insert into students values(2,'jane',200);
insert into students values(3,'jack',300);          
insert into students values(4,'jill',400);
insert into students values(5,'james',500);
insert into students values(6,'jake',600);
insert into students values(7,'jall',700);

insert into students values(8,'james',800);
insert into students values(9,'jaky',900);

insert into students values(10,'jilly',990);

select * from students;


# write a query to calculate the grade of each student based on their marks
# if marks >= 900 then grade = A+
# if marks < 900 and marks >=800 then grade = A
# if marks < 800 and marks >= 700 then grade = A-
# if marks < 700 and marks >= 600 then grade = B+       
# if marks < 600 and marks >= 500 then grade = B
# if marks < 500 and marks >= 400 then grade = C+
# if marks < 400 and marks >= 300 then grade = C
# if marks < 300 then grade = F

SELECT
    id, name, marks,
    CASE
        WHEN marks >= 900 THEN 'A+'
        WHEN marks < 900 AND marks >= 800 THEN 'A'
        WHEN marks < 800 AND marks >= 700 THEN 'A-'
        WHEN marks < 700 AND marks >= 600 THEN 'B+'
        WHEN marks < 600 AND marks >= 500 THEN 'B'
        WHEN marks < 500 AND marks >= 400 THEN 'C+'
        WHEN marks < 400 AND marks >= 300 THEN 'C'
        ELSE 'F'
    END AS grade

    from students;

#uber sql interview question
create table trees
(
 node int,
 parent int
);

insert into trees values(5,8),(9,8),(4,5),(2,9),(1,5),(3,9),(8,null);

select * from trees;

select NODE,
CASE 
    WHEN node not in (select distinct parent from trees where parent is not null) THEN 'leaf'
    when parent  is null then 'root'
    ELSE  'inner'
END as node_type from trees;


# amazon inetrview question  

create table transactions
(
 trx_date date,
 merchant varchar(50),
 amount int,
 mode Varchar(50)
);

insert into transactions values('2022-04-02','m1',150,'cash');
insert into transactions values('2022-04-02','m2',500,'online');
insert into transactions values('2022-04-03','m2',450,'online');
insert into transactions values('2022-04-03','m1',100,'cash');
insert into transactions values('2022-04-03','m3',600,'cash');
insert into transactions values('2022-04-05','m5',200,'online');
insert into transactions values('2022-04-05','m2',100,'online');


update transactions set mode = 'cash', merchant = 'm1' where amount = 500 and trx_date = '2022-04-02';

select * from transactions;

select merchant,
      sum(case when mode = 'cash' then amount else 0 end) as cash_amount,
      sum(case when mode = 'online' then amount else 0 end) as online_amount
from transactions group by merchant;

# joins ther are four types of joins in sql
# 1. inner join
# 2. left join
# 3. right join
# 4. full outer join

create table orders
(
 order_id int,
 cust_id int,
 order_date DATE,
 shipper_id int
);

create table customers
(
 cust_name varchar(50),
 cust_id int,
 country varchar(50)
);

insert into orders values(138,2,'2022-04-02',3);
insert into orders values(139,3,'2022-04-016',1);
insert into orders values(140,1,'2022-04-19',2);
insert into orders values(141,43,'2022-04-20',4);

insert into customers VALUES('john',1,'india');
insert into customers VALUES('jane',2,'usa'); 
insert into customers VALUES('jack',3,'uk');

insert into customers VALUES('jill',5,'canada');

select * from orders;
select * from customers;

# perform inner join on orders and customers table
# we could also have done the primary key and foreign key concept
# get the customer information for each order, if value of customer is present in orders table

#inner join

select
o.*,c.*
from orders O

inner join customers C on O.cust_id = C.cust_id;


# left join

select
o.*,c.*
from orders O

left join customers C on O.cust_id = C.cust_id;

# right join

select
o.*,c.*
from orders O

right join customers C on O.cust_id = C.cust_id;

# full outer join

#select
#o.*,c.*
#from orders O
#full outer join customers C on O.cust_id = C.cust_id;

# dont know the correct syntax for full outer join in mysql

# how to join more than 2 databases

create table shipper
(
 shipper_id int,
 shipper_name varchar(50)
);

insert into shipper values(1,'dhl');
insert into shipper values(3,'fedex');

select * from shipper;


# get the customer information for each order, if value of customer is present in orders table 
#also get shipper name

#first inner join of first 2 tables and then inner join with the third table

select
o.*, c.*, s.*
from orders O
inner join customers C on O.cust_id = C.cust_id
inner join shipper S on O.shipper_id = S.shipper_id;

create table employees_full_time
(
 emp_id int,
 name varchar(50),
 mgr_id int
);

insert into employees_full_time values(1,'john',3);
insert into employees_full_time values(2,'jane',4);
insert into employees_full_time values(3,'jack',1);      
insert into employees_full_time values(4,'jill',4);
insert into employees_full_time values(5,'james',1);
insert into employees_full_time values(6,'jake',null);
 select * from employees_full_time;

update employees_full_time set mgr_id = 2 where emp_id = 3;
update employees_full_time set mgr_id = 1 where emp_id = 6;
update employees_full_time set mgr_id = null where emp_id = 4;

# write a query to print distinct names of managers??

select 
