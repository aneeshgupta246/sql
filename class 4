CREATE DATABASE test;
USE test;

create table amazon
 (
 customerid int,
 orderid int,
 country varchar(50),
 state varchar(50)
 );

 Insert into amazon values(1,100,'usa','texas');
 Insert into amazon values(1,100,'usa','texas');
Insert into amazon values(1,100,'usa','texas');
  Insert into amazon values(2,900,'india','madhya pradesh'); 
  Insert into amazon values(3,300,'usa','north carolina');
   Insert into amazon values(4,200,'india','punjab');
    Insert into amazon values(5,800,'usa','california');
     Insert into amazon values(6,600,'africa','south africa');
      Insert into amazon values(7,500,'usa','dc');

Select * from amazon;

# use of having clause
# write a query top find a country where only one customer is there
select country from amazon group by country having count(*)=1;

# where clause is used to filter the records before grouping and having clause is used to filter the records after grouping

# how to use group concant
# group concat is used to concatenate the values of a column into a single string

# for example, if we have a table with customer id and order id, we can use group concat to get a list of order ids for each customer id

# write a query to print distinct states present in the dataset for each country
select country, group_concat(state) as states_from_country from amazon group by country;

#to remove duplicates from the list of states, we can use distinct keyword in group_concat function
select country, group_concat( distinct state) as states_from_country from amazon group by country;

# write a query to print distinct states present in the dataset for each country and order them in descending order 
select country, group_concat( distinct state order by state desc) as states_from_country from amazon group by country;

#separator keyword is used to specify the separator between the values in the concatenated string. By default, it is comma(,). We can change it to any other character or string.
# for example, if we want to use space as separator, we can use the following query
select country, group_concat( distinct state order by state desc separator '-') as states_from_country from amazon group by country;

create table employees
(
 id int,
 name varchar(50),
 saalry int
);

insert into employees values(1,'john',1000);
insert into employees values(2,'jane',2000);
insert into employees values(3,'jack',3000);
insert into employees values(4,'jill',4000);        
insert into employees values(5,'james',5000);
insert into employees values(6,'jake',6000);

select * from employees;

# write a query to print all those employees whose salary is greater than jack's salary

# wrong solution --> select * from employees where saalry > 6000;
select * from employees where saalry > (select saalry from employees where name='jack');

# write a query to print all those employees whose salary is greater than jack's salary and less than jill's salary
select * from employees where saalry > (select saalry from employees where name='john') and saalry < (select saalry from employees where name='jill');

# lookup function use of in and not in

# write a query to print all orders which were placed in madhya pradesh and punjab

#wrong solution --> select * from amazon where state = 'madhya pradesh' or state = 'punjab';
select * from amazon where state in ('madhya pradesh','punjab');

create table customer_orders
(
 order_id int,
 cust_id int,
 supp_id int,
country varchar(50)
);

insert into customer_orders values(1,101,100,'usa');
insert into customer_orders values(2,102,200,'usa');   
insert into customer_orders values(3,103,300,'india');
insert into customer_orders values(4,104,400,'pakistan');

insert into customer_orders values(5,105,500,'UK');

select * from customer_orders;

create table supplier_data
(
 supp_id int,
 country varchar(50)
);

insert INTO SUPPLIER_DATA VALUES(100,'usa');
insert INTO SUPPLIER_DATA VALUES(200,'usa');
insert INTO SUPPLIER_DATA VALUES(300,'india');
insert INTO SUPPLIER_DATA VALUES(400,'pakistan');

insert INTO SUPPLIER_DATA VALUES(500,'UAE');

SELECT * FROM SUPPLIER_DATA;\

# write a query to print all CUSTOMER ORDER DATA orders where supplier is LIVING IN THE SAME COUNTRY AS CUSTOMER
SELECT * FROM CUSTOMER_ORDERS WHERE COUNTRY IN (SELECT DISTINCT COUNTRY FROM SUPPLIER_DATA);

# write a query to print all CUSTOMER ORDER DATA orders where supplier is NOT LIVING IN THE SAME COUNTRY AS CUSTOMER
SELECT * FROM CUSTOMER_ORDERS WHERE COUNTRY NOT IN (SELECT DISTINCT COUNTRY FROM SUPPLIER_DATA);

