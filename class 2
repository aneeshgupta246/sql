CREATE database class2db;

use class2db;

create table if not exists employee(
    roll INT,
    name varchar(50),
    address varchar(50),
    city Varchar(50)
);

insert into employee values(1, 'John', '123 Main St', 'New York');
insert into employee values(2, 'Jane', '456 Elm St', 'Los Angeles');
insert into employee values(3, 'Jim', '789 Oak St', 'Chicago');

select * from employee;

# add new column named date of birth in the table

alter table employee add DOB date;

select * from employee;

--change or modify existing column in a column or chnage dtat type of name column or increase length of name column

alter table employee modify name varchar(100);
ALTER TABLE employee modify address VARCHAR(100);

select * from employee;

--- delete existing column from given table for example to remove city column from table employee

alter table employee drop column city;

select * from employee;

-- rename the column to full name from name

alter table employee rename column name to full_name;

select * from employee;

-- add a unique constraint on the id column

alter table employee add constraint unique_id unique(roll);

insert into employee values(1, 'John', '123 Main St', '2021-08-09');

-- the above command did nt get executed because we already have the entry for roll 1 so we have to drop constraint from existing table 

alter table employee drop constraint unique_id;

insert into employee values(1, 'John', '123 Main St', '2021-08-09');\

-- the above command will get executed successfully

select * from employee;

 
--create table with primary key

create table persons
(
    id INT,
    name varchar(50),
    address varchar(50),
    age int,
    --- primary key(id) or primary key(id,name) is a composite key

    constraint pk primary key(id)
)

select * from persons;

insert into persons values(1, 'John', '123 Main St', 25);
insert into persons values(2, 'Jane', '456 Elm St', 30);

insert into persons values(1, 'Jim', '789 Oak St', 35);

--- this will not get executed because we already have the entry for id 1

select * from persons;

insert into persons values(null, 'Jim', '789 Oak St', 35);

--- column id cannot be null because we have defined it as primary key so we have to drop the primary key constraint from the table

alter table persons add constraint age_unq unique (age);

--- for differnce between unique key and primary key see the below example
--- primary key does not allow null values but unique key allows null values

select * from persons;
insert into persons values(3, 'Jim', '789 Oak St', 25);

--- the above command will not get executed successfully because we have added unique constraint on age column 

insert into persons values(4, 'Jim', '789 Oak St', null);

--- the above command will get executed successfully because we have not added any constraint on null values

select * from persons;

insert into persons values(5, 'Jdim', '78d9 Oak St', null);

--- the above command will get executed successfully as here the system is treating every null as a diifferent value but this doesn't generally happen in other databases like oracle or sql server

insert into persons values(6, 'Jdim', '78d9 Oak St', 78);

Select * from persons;


--- craete tables for foreign key demo 

create table customer
(
customer_id int,
name varchar(50),
age int,

constraint pk primary key(customer_id)
);

create table orders
(
order_id int,
order_num int,
cust_id int,

constraint pk primary key(order_id),
constraint fk foreign key (cust_id) REFERENCES customer(customer_id)
);

--- differnce between the drop and truncate command 

Select * from persons;

truncate table persons;

Select * from persons;

--- the table is still showing as after trucate only table schema is lost not the table

drop table persons;

Select * from persons;

--- the above command will nto executed as we have dropped the table as well as the schema


--- operations with select command 

select * from employee;
drop table employee;

create table if not exists employee(
    id INT,
    name varchar(50),
    age int,
    hiring_date date,
    salary int,
    city Varchar(50)
);

insert into employee values (1,"shsahsnk",24,"2020-02-02",1000,"noida");
insert into employee values (2,"John",28,"2019-03-15",2000,"New York"),
(3,"Jane",32,"2018-07-10",2500,"Los Angeles"),
(4,"Jim",29,"2021-01-20",1800,"Chicago"),
(5,"Alice",26,"2020-05-25",2200,"Houston"),
(6,"Bob",35,"2017-11-30",3000,"Phoenix"),
(7,"Charlie",30,"2016-09-12",2700,"Philadelphia"),
(8,"Diana",27,"2022-04-18",1900,"San Antonio"),
(9,"Eve",31,"2015-08-22",3100,"San Diego"),
(10,"Frank",33,"2014-12-05",3200,"Dallas"),
(11,"Grace",25,"2023-03-01",1700,"San Jose"),
(12,"Hank",34,"2013-06-15",3300,"Austin"),
(13,"Ivy",28,"2021-10-10",2100,"Jacksonville"),
(14,"Jack",29,"2020-08-08",2300,"Fort Worth"),
(15,"Karen",30,"2019-02-14",2400,"Columbus"),
(16,"Leo",31,"2018-11-11",2600,"Charlotte"),
(17,"Mona",32,"2017-07-07",2800,"San Francisco"),
(18,"Nina",33,"2016-05-05",2900,"Indianapolis"),
(19,"Oscar",34,"2015-03-03",3000,"Seattle"),
(20,"Paul",35,"2014-01-01",3100,"Denver");

select * from employee;

--- how to count total records

select count(*) from employee;

--- alias declaration

select count(*) as total_row from employee;

--- display all columns in final result 

select * from employee;

--- display selected columns in final result 

select name, salary from employee;

--- display selected columns with fancy name in final result 

select name as employee_name, salary as show_methemoney from employee;

select * from employee;


--- print unique hiring dates from the employee table when employees joined it 

select distinct(hiring_date) from employee;

--- distinct is a function as we are passing parameters for it just like in python

--- how many unique age values in the table?

select count(distinct(age)) from employee;

--- here distinct function became parameters for count function


--- increment salary of each employee by 20% and display final result with new salary

select 
   id,
    name,
    salary as old_salary,
    (salary + 0.2*salary) as new_salary from employee;
 

--- syntax for update command

select * from employee;

--- to update a all rows of a particular column in employee

update employee SET age = 20;

select * from employee;

--- update the salary of each employee by 20 percent raise

update employee set salary=salary*1.2;

select * from employee;

--- how to filter data using where clause

select * from employee where hiring_date = "2020-02-02";
